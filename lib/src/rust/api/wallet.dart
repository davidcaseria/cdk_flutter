// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Uint8List generateSeed() => RustLib.instance.api.crateApiWalletGenerateSeed();

String generateHexSeed() =>
    RustLib.instance.api.crateApiWalletGenerateHexSeed();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultiMintWallet>>
abstract class MultiMintWallet implements RustOpaqueInterface {
  Future<void> addWallet({required Wallet wallet});

  Future<Wallet?> getWallet({required String mintUrl, required String unit});

  Future<List<Wallet>> listWallets();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<MultiMintWallet> newInstance(
          {required String unit,
          required List<int> seed,
          BigInt? targetProofCount,
          required WalletDatabase localstore}) =>
      RustLib.instance.api.crateApiWalletMultiMintWalletNew(
          unit: unit,
          seed: seed,
          targetProofCount: targetProofCount,
          localstore: localstore);

  static Future<MultiMintWallet> newFromHexSeed(
          {required String unit,
          required String seed,
          BigInt? targetProofCount,
          required WalletDatabase localstore}) =>
      RustLib.instance.api.crateApiWalletMultiMintWalletNewFromHexSeed(
          unit: unit,
          seed: seed,
          targetProofCount: targetProofCount,
          localstore: localstore);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Wallet>>
abstract class Wallet implements RustOpaqueInterface {
  String get mintUrl;

  String get unit;

  set mintUrl(String mintUrl);

  set unit(String unit);

  Future<BigInt> balance();

  factory Wallet(
          {required String mintUrl,
          required String unit,
          required List<int> seed,
          BigInt? targetProofCount,
          required WalletDatabase localstore}) =>
      RustLib.instance.api.crateApiWalletWalletNew(
          mintUrl: mintUrl,
          unit: unit,
          seed: seed,
          targetProofCount: targetProofCount,
          localstore: localstore);

  static Wallet newFromHexSeed(
          {required String mintUrl,
          required String currencyUnit,
          required String seed,
          BigInt? targetProofCount,
          required WalletDatabase localstore}) =>
      RustLib.instance.api.crateApiWalletWalletNewFromHexSeed(
          mintUrl: mintUrl,
          currencyUnit: currencyUnit,
          seed: seed,
          targetProofCount: targetProofCount,
          localstore: localstore);

  Future<BigInt> receive(
      {required String token, String? p2PkSigningKey, String? preimage});

  Future<String> send({required BigInt amount, String? memo, String? pubkey});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WalletDatabase>>
abstract class WalletDatabase implements RustOpaqueInterface {
  factory WalletDatabase({required String path}) =>
      RustLib.instance.api.crateApiWalletWalletDatabaseNew(path: path);
}
