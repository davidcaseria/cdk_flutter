// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `cmp`, `eq`, `from`, `from`, `from`, `partial_cmp`

Future<MintInfo> getMintInfo({required String mintUrl}) =>
    RustLib.instance.api.crateApiMintGetMintInfo(mintUrl: mintUrl);

class ContactInfo {
  final String method;
  final String info;

  const ContactInfo({
    required this.method,
    required this.info,
  });

  @override
  int get hashCode => method.hashCode ^ info.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ContactInfo &&
          runtimeType == other.runtimeType &&
          method == other.method &&
          info == other.info;
}

class Mint {
  final String url;
  final MintInfo? info;
  final BigInt balance;

  const Mint({
    required this.url,
    this.info,
    required this.balance,
  });

  @override
  int get hashCode => url.hashCode ^ info.hashCode ^ balance.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Mint &&
          runtimeType == other.runtimeType &&
          url == other.url &&
          info == other.info &&
          balance == other.balance;
}

class MintInfo {
  final String? name;
  final String? pubkey;
  final MintVersion? version;
  final String? description;
  final String? descriptionLong;
  final List<ContactInfo>? contact;
  final String? iconUrl;
  final List<String>? urls;
  final String? motd;
  final BigInt? time;

  const MintInfo({
    this.name,
    this.pubkey,
    this.version,
    this.description,
    this.descriptionLong,
    this.contact,
    this.iconUrl,
    this.urls,
    this.motd,
    this.time,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      pubkey.hashCode ^
      version.hashCode ^
      description.hashCode ^
      descriptionLong.hashCode ^
      contact.hashCode ^
      iconUrl.hashCode ^
      urls.hashCode ^
      motd.hashCode ^
      time.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MintInfo &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          pubkey == other.pubkey &&
          version == other.version &&
          description == other.description &&
          descriptionLong == other.descriptionLong &&
          contact == other.contact &&
          iconUrl == other.iconUrl &&
          urls == other.urls &&
          motd == other.motd &&
          time == other.time;
}

class MintVersion {
  final String name;
  final String version;

  const MintVersion({
    required this.name,
    required this.version,
  });

  @override
  int get hashCode => name.hashCode ^ version.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MintVersion &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          version == other.version;
}
