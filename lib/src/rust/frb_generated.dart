// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/error.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.0';

  @override
  int get rustContentHash => -206028404;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'cdk_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiWalletMultiMintWalletAddWallet(
      {required MultiMintWallet that, required Wallet wallet});

  String crateApiWalletMultiMintWalletAutoAccessorGetUnit(
      {required MultiMintWallet that});

  void crateApiWalletMultiMintWalletAutoAccessorSetUnit(
      {required MultiMintWallet that, required String unit});

  Future<Wallet?> crateApiWalletMultiMintWalletGetWallet(
      {required MultiMintWallet that, required String mintUrl});

  Future<List<String>> crateApiWalletMultiMintWalletListMints(
      {required MultiMintWallet that});

  Future<List<Wallet>> crateApiWalletMultiMintWalletListWallets(
      {required MultiMintWallet that});

  Future<MultiMintWallet> crateApiWalletMultiMintWalletNew(
      {required String unit,
      required List<int> seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore});

  Future<MultiMintWallet> crateApiWalletMultiMintWalletNewFromHexSeed(
      {required String unit,
      required String seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore});

  Stream<BigInt> crateApiWalletMultiMintWalletStreamBalance(
      {required MultiMintWallet that});

  Future<BigInt> crateApiWalletMultiMintWalletTotalBalance(
      {required MultiMintWallet that});

  WalletDatabase crateApiWalletWalletDatabaseNew({required String path});

  String crateApiWalletWalletAutoAccessorGetMintUrl({required Wallet that});

  String crateApiWalletWalletAutoAccessorGetUnit({required Wallet that});

  void crateApiWalletWalletAutoAccessorSetMintUrl(
      {required Wallet that, required String mintUrl});

  void crateApiWalletWalletAutoAccessorSetUnit(
      {required Wallet that, required String unit});

  Future<BigInt> crateApiWalletWalletBalance({required Wallet that});

  Future<bool> crateApiWalletWalletIsTokenSpent(
      {required Wallet that, required String token});

  Stream<MintQuote> crateApiWalletWalletMint(
      {required Wallet that, required BigInt amount, String? description});

  Wallet crateApiWalletWalletNew(
      {required String mintUrl,
      required String unit,
      required List<int> seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore});

  Wallet crateApiWalletWalletNewFromHexSeed(
      {required String mintUrl,
      required String currencyUnit,
      required String seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore});

  Future<BigInt> crateApiWalletWalletReceive(
      {required Wallet that,
      required String token,
      String? p2PkSigningKey,
      String? preimage});

  Future<String> crateApiWalletWalletSend(
      {required Wallet that,
      required BigInt amount,
      String? memo,
      String? pubkey});

  Stream<BigInt> crateApiWalletWalletStreamBalance({required Wallet that});

  String crateApiWalletGenerateHexSeed();

  Uint8List crateApiWalletGenerateSeed();

  Future<void> crateApiInitInitApp();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MultiMintWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MultiMintWallet;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MultiMintWalletPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Wallet;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Wallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WalletPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletDatabase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletDatabase;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WalletDatabasePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiWalletMultiMintWalletAddWallet(
      {required MultiMintWallet that, required Wallet wallet}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            wallet, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletAddWalletConstMeta,
      argValues: [that, wallet],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletAddWalletConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_add_wallet",
        argNames: ["that", "wallet"],
      );

  @override
  String crateApiWalletMultiMintWalletAutoAccessorGetUnit(
      {required MultiMintWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletMultiMintWalletAutoAccessorGetUnitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletMultiMintWalletAutoAccessorGetUnitConstMeta =>
          const TaskConstMeta(
            debugName: "MultiMintWallet_auto_accessor_get_unit",
            argNames: ["that"],
          );

  @override
  void crateApiWalletMultiMintWalletAutoAccessorSetUnit(
      {required MultiMintWallet that, required String unit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_String(unit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletMultiMintWalletAutoAccessorSetUnitConstMeta,
      argValues: [that, unit],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletMultiMintWalletAutoAccessorSetUnitConstMeta =>
          const TaskConstMeta(
            debugName: "MultiMintWallet_auto_accessor_set_unit",
            argNames: ["that", "unit"],
          );

  @override
  Future<Wallet?> crateApiWalletMultiMintWalletGetWallet(
      {required MultiMintWallet that, required String mintUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_String(mintUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletGetWalletConstMeta,
      argValues: [that, mintUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletGetWalletConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_get_wallet",
        argNames: ["that", "mintUrl"],
      );

  @override
  Future<List<String>> crateApiWalletMultiMintWalletListMints(
      {required MultiMintWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletMultiMintWalletListMintsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletListMintsConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_list_mints",
        argNames: ["that"],
      );

  @override
  Future<List<Wallet>> crateApiWalletMultiMintWalletListWallets(
      {required MultiMintWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletMultiMintWalletListWalletsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletListWalletsConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_list_wallets",
        argNames: ["that"],
      );

  @override
  Future<MultiMintWallet> crateApiWalletMultiMintWalletNew(
      {required String unit,
      required List<int> seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(unit, serializer);
        sse_encode_list_prim_u_8_loose(seed, serializer);
        sse_encode_opt_box_autoadd_usize(targetProofCount, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
            localstore, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletNewConstMeta,
      argValues: [unit, seed, targetProofCount, localstore],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletNewConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_new",
        argNames: ["unit", "seed", "targetProofCount", "localstore"],
      );

  @override
  Future<MultiMintWallet> crateApiWalletMultiMintWalletNewFromHexSeed(
      {required String unit,
      required String seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(unit, serializer);
        sse_encode_String(seed, serializer);
        sse_encode_opt_box_autoadd_usize(targetProofCount, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
            localstore, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletNewFromHexSeedConstMeta,
      argValues: [unit, seed, targetProofCount, localstore],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletNewFromHexSeedConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_new_from_hex_seed",
        argNames: ["unit", "seed", "targetProofCount", "localstore"],
      );

  @override
  Stream<BigInt> crateApiWalletMultiMintWalletStreamBalance(
      {required MultiMintWallet that}) {
    final sink = RustStreamSink<BigInt>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_StreamSink_u_64_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletStreamBalanceConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletStreamBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_stream_balance",
        argNames: ["that", "sink"],
      );

  @override
  Future<BigInt> crateApiWalletMultiMintWalletTotalBalance(
      {required MultiMintWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletTotalBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletTotalBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_total_balance",
        argNames: ["that"],
      );

  @override
  WalletDatabase crateApiWalletWalletDatabaseNew({required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletDatabaseNewConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletDatabaseNewConstMeta =>
      const TaskConstMeta(
        debugName: "WalletDatabase_new",
        argNames: ["path"],
      );

  @override
  String crateApiWalletWalletAutoAccessorGetMintUrl({required Wallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletAutoAccessorGetMintUrlConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletAutoAccessorGetMintUrlConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_auto_accessor_get_mint_url",
        argNames: ["that"],
      );

  @override
  String crateApiWalletWalletAutoAccessorGetUnit({required Wallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletAutoAccessorGetUnitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletAutoAccessorGetUnitConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_auto_accessor_get_unit",
        argNames: ["that"],
      );

  @override
  void crateApiWalletWalletAutoAccessorSetMintUrl(
      {required Wallet that, required String mintUrl}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_String(mintUrl, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletAutoAccessorSetMintUrlConstMeta,
      argValues: [that, mintUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletAutoAccessorSetMintUrlConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_auto_accessor_set_mint_url",
        argNames: ["that", "mintUrl"],
      );

  @override
  void crateApiWalletWalletAutoAccessorSetUnit(
      {required Wallet that, required String unit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_String(unit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletAutoAccessorSetUnitConstMeta,
      argValues: [that, unit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletAutoAccessorSetUnitConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_auto_accessor_set_unit",
        argNames: ["that", "unit"],
      );

  @override
  Future<BigInt> crateApiWalletWalletBalance({required Wallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_balance",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiWalletWalletIsTokenSpent(
      {required Wallet that, required String token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_String(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletIsTokenSpentConstMeta,
      argValues: [that, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletIsTokenSpentConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_is_token_spent",
        argNames: ["that", "token"],
      );

  @override
  Stream<MintQuote> crateApiWalletWalletMint(
      {required Wallet that, required BigInt amount, String? description}) {
    final sink = RustStreamSink<MintQuote>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_u_64(amount, serializer);
        sse_encode_opt_String(description, serializer);
        sse_encode_StreamSink_mint_quote_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletMintConstMeta,
      argValues: [that, amount, description, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiWalletWalletMintConstMeta => const TaskConstMeta(
        debugName: "Wallet_mint",
        argNames: ["that", "amount", "description", "sink"],
      );

  @override
  Wallet crateApiWalletWalletNew(
      {required String mintUrl,
      required String unit,
      required List<int> seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(mintUrl, serializer);
        sse_encode_String(unit, serializer);
        sse_encode_list_prim_u_8_loose(seed, serializer);
        sse_encode_opt_box_autoadd_usize(targetProofCount, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
            localstore, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletNewConstMeta,
      argValues: [mintUrl, unit, seed, targetProofCount, localstore],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletNewConstMeta => const TaskConstMeta(
        debugName: "Wallet_new",
        argNames: ["mintUrl", "unit", "seed", "targetProofCount", "localstore"],
      );

  @override
  Wallet crateApiWalletWalletNewFromHexSeed(
      {required String mintUrl,
      required String currencyUnit,
      required String seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(mintUrl, serializer);
        sse_encode_String(currencyUnit, serializer);
        sse_encode_String(seed, serializer);
        sse_encode_opt_box_autoadd_usize(targetProofCount, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
            localstore, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletNewFromHexSeedConstMeta,
      argValues: [mintUrl, currencyUnit, seed, targetProofCount, localstore],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletNewFromHexSeedConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_new_from_hex_seed",
        argNames: [
          "mintUrl",
          "currencyUnit",
          "seed",
          "targetProofCount",
          "localstore"
        ],
      );

  @override
  Future<BigInt> crateApiWalletWalletReceive(
      {required Wallet that,
      required String token,
      String? p2PkSigningKey,
      String? preimage}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_String(token, serializer);
        sse_encode_opt_String(p2PkSigningKey, serializer);
        sse_encode_opt_String(preimage, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletReceiveConstMeta,
      argValues: [that, token, p2PkSigningKey, preimage],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletReceiveConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_receive",
        argNames: ["that", "token", "p2PkSigningKey", "preimage"],
      );

  @override
  Future<String> crateApiWalletWalletSend(
      {required Wallet that,
      required BigInt amount,
      String? memo,
      String? pubkey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_u_64(amount, serializer);
        sse_encode_opt_String(memo, serializer);
        sse_encode_opt_String(pubkey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletSendConstMeta,
      argValues: [that, amount, memo, pubkey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletSendConstMeta => const TaskConstMeta(
        debugName: "Wallet_send",
        argNames: ["that", "amount", "memo", "pubkey"],
      );

  @override
  Stream<BigInt> crateApiWalletWalletStreamBalance({required Wallet that}) {
    final sink = RustStreamSink<BigInt>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_StreamSink_u_64_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletStreamBalanceConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiWalletWalletStreamBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_stream_balance",
        argNames: ["that", "sink"],
      );

  @override
  String crateApiWalletGenerateHexSeed() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletGenerateHexSeedConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGenerateHexSeedConstMeta =>
      const TaskConstMeta(
        debugName: "generate_hex_seed",
        argNames: [],
      );

  @override
  Uint8List crateApiWalletGenerateSeed() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletGenerateSeedConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGenerateSeedConstMeta => const TaskConstMeta(
        debugName: "generate_seed",
        argNames: [],
      );

  @override
  Future<void> crateApiInitInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MultiMintWallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MultiMintWallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Wallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Wallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletDatabase => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletDatabase => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  MultiMintWallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletDatabase
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletDatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MultiMintWallet
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MultiMintWallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MultiMintWallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletDatabase
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletDatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<MintQuote> dco_decode_StreamSink_mint_quote_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<BigInt> dco_decode_StreamSink_u_64_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Wallet
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
        raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  Error dco_decode_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Error_Cdk(
          dco_decode_String(raw[1]),
        );
      case 1:
        return Error_Database(
          dco_decode_String(raw[1]),
        );
      case 2:
        return Error_Hex(
          dco_decode_String(raw[1]),
        );
      case 3:
        return Error_Protocol(
          dco_decode_String(raw[1]),
        );
      case 4:
        return Error_Url(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Wallet>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MintQuote dco_decode_mint_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return MintQuote(
      id: dco_decode_String(arr[0]),
      request: dco_decode_String(arr[1]),
      amount: dco_decode_u_64(arr[2]),
      expiry: dco_decode_opt_box_autoadd_u_64(arr[3]),
      state: dco_decode_mint_quote_state(arr[4]),
      token: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  MintQuoteState dco_decode_mint_quote_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MintQuoteState.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Wallet?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  MultiMintWallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletDatabase
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletDatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MultiMintWallet
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MultiMintWallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MultiMintWallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletDatabase
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletDatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<MintQuote> sse_decode_StreamSink_mint_quote_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<BigInt> sse_decode_StreamSink_u_64_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Wallet
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
        deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  Error sse_decode_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Cdk(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Database(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Hex(var_field0);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Protocol(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Url(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<Wallet>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Wallet>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MintQuote sse_decode_mint_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_request = sse_decode_String(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_expiry = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_state = sse_decode_mint_quote_state(deserializer);
    var var_token = sse_decode_opt_String(deserializer);
    return MintQuote(
        id: var_id,
        request: var_request,
        amount: var_amount,
        expiry: var_expiry,
        state: var_state,
        token: var_token);
  }

  @protected
  MintQuoteState sse_decode_mint_quote_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MintQuoteState.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Wallet?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          MultiMintWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MultiMintWalletImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          WalletDatabase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletDatabaseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          MultiMintWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MultiMintWalletImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          MultiMintWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MultiMintWalletImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          MultiMintWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MultiMintWalletImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          WalletDatabase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletDatabaseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_mint_quote_Sse(
      RustStreamSink<MintQuote> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_mint_quote,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_u_64_Sse(
      RustStreamSink<BigInt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_error(Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Error_Cdk(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case Error_Database(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case Error_Hex(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case Error_Protocol(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      case Error_Url(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          List<Wallet> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_mint_quote(MintQuote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.request, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_opt_box_autoadd_u_64(self.expiry, serializer);
    sse_encode_mint_quote_state(self.state, serializer);
    sse_encode_opt_String(self.token, serializer);
  }

  @protected
  void sse_encode_mint_quote_state(
      MintQuoteState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class MultiMintWalletImpl extends RustOpaque implements MultiMintWallet {
  // Not to be used by end users
  MultiMintWalletImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MultiMintWalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MultiMintWallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MultiMintWallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MultiMintWalletPtr,
  );

  Future<void> addWallet({required Wallet wallet}) => RustLib.instance.api
      .crateApiWalletMultiMintWalletAddWallet(that: this, wallet: wallet);

  String get unit =>
      RustLib.instance.api.crateApiWalletMultiMintWalletAutoAccessorGetUnit(
        that: this,
      );

  set unit(String unit) => RustLib.instance.api
      .crateApiWalletMultiMintWalletAutoAccessorSetUnit(that: this, unit: unit);

  Future<Wallet?> getWallet({required String mintUrl}) => RustLib.instance.api
      .crateApiWalletMultiMintWalletGetWallet(that: this, mintUrl: mintUrl);

  Future<List<String>> listMints() =>
      RustLib.instance.api.crateApiWalletMultiMintWalletListMints(
        that: this,
      );

  Future<List<Wallet>> listWallets() =>
      RustLib.instance.api.crateApiWalletMultiMintWalletListWallets(
        that: this,
      );

  Stream<BigInt> streamBalance() =>
      RustLib.instance.api.crateApiWalletMultiMintWalletStreamBalance(
        that: this,
      );

  Future<BigInt> totalBalance() =>
      RustLib.instance.api.crateApiWalletMultiMintWalletTotalBalance(
        that: this,
      );
}

@sealed
class WalletDatabaseImpl extends RustOpaque implements WalletDatabase {
  // Not to be used by end users
  WalletDatabaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletDatabaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WalletDatabase,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletDatabase,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletDatabasePtr,
  );
}

@sealed
class WalletImpl extends RustOpaque implements Wallet {
  // Not to be used by end users
  WalletImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Wallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Wallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletPtr,
  );

  String get mintUrl =>
      RustLib.instance.api.crateApiWalletWalletAutoAccessorGetMintUrl(
        that: this,
      );

  String get unit =>
      RustLib.instance.api.crateApiWalletWalletAutoAccessorGetUnit(
        that: this,
      );

  set mintUrl(String mintUrl) => RustLib.instance.api
      .crateApiWalletWalletAutoAccessorSetMintUrl(that: this, mintUrl: mintUrl);

  set unit(String unit) => RustLib.instance.api
      .crateApiWalletWalletAutoAccessorSetUnit(that: this, unit: unit);

  Future<BigInt> balance() => RustLib.instance.api.crateApiWalletWalletBalance(
        that: this,
      );

  Future<bool> isTokenSpent({required String token}) => RustLib.instance.api
      .crateApiWalletWalletIsTokenSpent(that: this, token: token);

  Stream<MintQuote> mint({required BigInt amount, String? description}) =>
      RustLib.instance.api.crateApiWalletWalletMint(
          that: this, amount: amount, description: description);

  Future<BigInt> receive(
          {required String token, String? p2PkSigningKey, String? preimage}) =>
      RustLib.instance.api.crateApiWalletWalletReceive(
          that: this,
          token: token,
          p2PkSigningKey: p2PkSigningKey,
          preimage: preimage);

  Future<String> send({required BigInt amount, String? memo, String? pubkey}) =>
      RustLib.instance.api.crateApiWalletWalletSend(
          that: this, amount: amount, memo: memo, pubkey: pubkey);

  Stream<BigInt> streamBalance() =>
      RustLib.instance.api.crateApiWalletWalletStreamBalance(
        that: this,
      );
}
