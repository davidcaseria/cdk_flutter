// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/bitcoin.dart';
import 'api/error.dart';
import 'api/mint.dart';
import 'api/payment_request.dart';
import 'api/token.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => -307136552;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'cdk_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiWalletMultiMintWalletAddMint(
      {required MultiMintWallet that, required String mintUrl});

  Future<void> crateApiWalletMultiMintWalletAddWallet(
      {required MultiMintWallet that, required Wallet wallet});

  String crateApiWalletMultiMintWalletAutoAccessorGetUnit(
      {required MultiMintWallet that});

  void crateApiWalletMultiMintWalletAutoAccessorSetUnit(
      {required MultiMintWallet that, required String unit});

  Future<List<Mint>> crateApiWalletMultiMintWalletAvailableMints(
      {required MultiMintWallet that, BigInt? amount, List<String>? mintUrls});

  Future<Wallet> crateApiWalletMultiMintWalletCreateOrGetWallet(
      {required MultiMintWallet that, required String mintUrl});

  Future<Wallet?> crateApiWalletMultiMintWalletGetWallet(
      {required MultiMintWallet that, required String mintUrl});

  Future<List<Mint>> crateApiWalletMultiMintWalletListMints(
      {required MultiMintWallet that});

  Future<List<Transaction>> crateApiWalletMultiMintWalletListTransactions(
      {required MultiMintWallet that,
      TransactionDirection? direction,
      String? mintUrl});

  Future<List<Wallet>> crateApiWalletMultiMintWalletListWallets(
      {required MultiMintWallet that});

  Future<MultiMintWallet> crateApiWalletMultiMintWalletNew(
      {required String unit,
      required List<int> seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore});

  Future<MultiMintWallet> crateApiWalletMultiMintWalletNewFromHexSeed(
      {required String unit,
      required String seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore});

  Future<void> crateApiWalletMultiMintWalletReclaimReserved(
      {required MultiMintWallet that});

  Future<void> crateApiWalletMultiMintWalletRemoveMint(
      {required MultiMintWallet that, required String mintUrl});

  Future<Wallet?> crateApiWalletMultiMintWalletSelectWallet(
      {required MultiMintWallet that, BigInt? amount, List<String>? mintUrls});

  Stream<BigInt> crateApiWalletMultiMintWalletStreamBalance(
      {required MultiMintWallet that});

  Future<BigInt> crateApiWalletMultiMintWalletTotalBalance(
      {required MultiMintWallet that});

  BigInt crateApiWalletPreparedSendAutoAccessorGetAmount(
      {required PreparedSend that});

  BigInt crateApiWalletPreparedSendAutoAccessorGetFee(
      {required PreparedSend that});

  BigInt crateApiWalletPreparedSendAutoAccessorGetSendFee(
      {required PreparedSend that});

  BigInt crateApiWalletPreparedSendAutoAccessorGetSwapFee(
      {required PreparedSend that});

  void crateApiWalletPreparedSendAutoAccessorSetAmount(
      {required PreparedSend that, required BigInt amount});

  void crateApiWalletPreparedSendAutoAccessorSetFee(
      {required PreparedSend that, required BigInt fee});

  void crateApiWalletPreparedSendAutoAccessorSetSendFee(
      {required PreparedSend that, required BigInt sendFee});

  void crateApiWalletPreparedSendAutoAccessorSetSwapFee(
      {required PreparedSend that, required BigInt swapFee});

  Future<WalletDatabase> crateApiWalletWalletDatabaseNew(
      {required String path});

  String crateApiWalletWalletAutoAccessorGetMintUrl({required Wallet that});

  String crateApiWalletWalletAutoAccessorGetUnit({required Wallet that});

  void crateApiWalletWalletAutoAccessorSetMintUrl(
      {required Wallet that, required String mintUrl});

  void crateApiWalletWalletAutoAccessorSetUnit(
      {required Wallet that, required String unit});

  Future<BigInt> crateApiWalletWalletBalance({required Wallet that});

  Future<void> crateApiWalletWalletCancelSend(
      {required Wallet that, required PreparedSend send});

  Future<Mint> crateApiWalletWalletGetMint({required Wallet that});

  Future<bool> crateApiWalletWalletIsTokenSpent(
      {required Wallet that, required Token token});

  Future<List<Transaction>> crateApiWalletWalletListTransactions(
      {required Wallet that, TransactionDirection? direction});

  Future<BigInt> crateApiWalletWalletMelt(
      {required Wallet that, required MeltQuote quote});

  Future<MeltQuote> crateApiWalletWalletMeltQuote(
      {required Wallet that, required String request});

  Stream<MintQuote> crateApiWalletWalletMint(
      {required Wallet that, required BigInt amount, String? description});

  Wallet crateApiWalletWalletNew(
      {required String mintUrl,
      required String unit,
      required List<int> seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore});

  Wallet crateApiWalletWalletNewFromHexSeed(
      {required String mintUrl,
      required String unit,
      required String seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore});

  Future<void> crateApiWalletWalletPayRequest(
      {required Wallet that,
      required PaymentRequest request,
      required PreparedSend send,
      String? memo,
      bool? includeMemo});

  Future<PreparedSend> crateApiWalletWalletPreparePayRequest(
      {required Wallet that, required PaymentRequest request});

  Future<PreparedSend> crateApiWalletWalletPrepareSend(
      {required Wallet that, required BigInt amount, SendOptions? opts});

  Future<BigInt> crateApiWalletWalletReceive(
      {required Wallet that, required Token token, ReceiveOptions? opts});

  Future<void> crateApiWalletWalletReclaimReserved({required Wallet that});

  Future<void> crateApiWalletWalletReclaimSend(
      {required Wallet that, required Token token});

  Future<void> crateApiWalletWalletRestore({required Wallet that});

  Future<Token> crateApiWalletWalletSend(
      {required Wallet that,
      required PreparedSend send,
      String? memo,
      bool? includeMemo});

  Stream<BigInt> crateApiWalletWalletStreamBalance({required Wallet that});

  String crateApiWalletGenerateHexSeed();

  Uint8List crateApiWalletGenerateSeed();

  String crateApiWalletGetPubKey({required String secret});

  Future<void> crateApiInitInitApp();

  ParseInputResult crateApiWalletParseInput({required String input});

  String crateApiPaymentRequestPaymentRequestEncode(
      {required PaymentRequest that});

  Future<ReceiveOptions> crateApiWalletReceiveOptionsDefault();

  Future<SendOptions> crateApiWalletSendOptionsDefault();

  Token crateApiTokenTokenParse({required String encoded});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MultiMintWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MultiMintWallet;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MultiMintWalletPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PreparedSend;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PreparedSend;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PreparedSendPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Wallet;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Wallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WalletPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletDatabase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletDatabase;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WalletDatabasePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiWalletMultiMintWalletAddMint(
      {required MultiMintWallet that, required String mintUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_String(mintUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletAddMintConstMeta,
      argValues: [that, mintUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletAddMintConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_add_mint",
        argNames: ["that", "mintUrl"],
      );

  @override
  Future<void> crateApiWalletMultiMintWalletAddWallet(
      {required MultiMintWallet that, required Wallet wallet}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            wallet, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletAddWalletConstMeta,
      argValues: [that, wallet],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletAddWalletConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_add_wallet",
        argNames: ["that", "wallet"],
      );

  @override
  String crateApiWalletMultiMintWalletAutoAccessorGetUnit(
      {required MultiMintWallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletMultiMintWalletAutoAccessorGetUnitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletMultiMintWalletAutoAccessorGetUnitConstMeta =>
          const TaskConstMeta(
            debugName: "MultiMintWallet_auto_accessor_get_unit",
            argNames: ["that"],
          );

  @override
  void crateApiWalletMultiMintWalletAutoAccessorSetUnit(
      {required MultiMintWallet that, required String unit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_String(unit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletMultiMintWalletAutoAccessorSetUnitConstMeta,
      argValues: [that, unit],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletMultiMintWalletAutoAccessorSetUnitConstMeta =>
          const TaskConstMeta(
            debugName: "MultiMintWallet_auto_accessor_set_unit",
            argNames: ["that", "unit"],
          );

  @override
  Future<List<Mint>> crateApiWalletMultiMintWalletAvailableMints(
      {required MultiMintWallet that, BigInt? amount, List<String>? mintUrls}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_opt_box_autoadd_u_64(amount, serializer);
        sse_encode_opt_list_String(mintUrls, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_mint,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletAvailableMintsConstMeta,
      argValues: [that, amount, mintUrls],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletAvailableMintsConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_available_mints",
        argNames: ["that", "amount", "mintUrls"],
      );

  @override
  Future<Wallet> crateApiWalletMultiMintWalletCreateOrGetWallet(
      {required MultiMintWallet that, required String mintUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_String(mintUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletCreateOrGetWalletConstMeta,
      argValues: [that, mintUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletCreateOrGetWalletConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_create_or_get_wallet",
        argNames: ["that", "mintUrl"],
      );

  @override
  Future<Wallet?> crateApiWalletMultiMintWalletGetWallet(
      {required MultiMintWallet that, required String mintUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_String(mintUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletGetWalletConstMeta,
      argValues: [that, mintUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletGetWalletConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_get_wallet",
        argNames: ["that", "mintUrl"],
      );

  @override
  Future<List<Mint>> crateApiWalletMultiMintWalletListMints(
      {required MultiMintWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_mint,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletListMintsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletListMintsConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_list_mints",
        argNames: ["that"],
      );

  @override
  Future<List<Transaction>> crateApiWalletMultiMintWalletListTransactions(
      {required MultiMintWallet that,
      TransactionDirection? direction,
      String? mintUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_opt_box_autoadd_transaction_direction(direction, serializer);
        sse_encode_opt_String(mintUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_transaction,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletListTransactionsConstMeta,
      argValues: [that, direction, mintUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletListTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_list_transactions",
        argNames: ["that", "direction", "mintUrl"],
      );

  @override
  Future<List<Wallet>> crateApiWalletMultiMintWalletListWallets(
      {required MultiMintWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletMultiMintWalletListWalletsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletListWalletsConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_list_wallets",
        argNames: ["that"],
      );

  @override
  Future<MultiMintWallet> crateApiWalletMultiMintWalletNew(
      {required String unit,
      required List<int> seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(unit, serializer);
        sse_encode_list_prim_u_8_loose(seed, serializer);
        sse_encode_opt_box_autoadd_usize(targetProofCount, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
            localstore, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletNewConstMeta,
      argValues: [unit, seed, targetProofCount, localstore],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletNewConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_new",
        argNames: ["unit", "seed", "targetProofCount", "localstore"],
      );

  @override
  Future<MultiMintWallet> crateApiWalletMultiMintWalletNewFromHexSeed(
      {required String unit,
      required String seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(unit, serializer);
        sse_encode_String(seed, serializer);
        sse_encode_opt_box_autoadd_usize(targetProofCount, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
            localstore, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletNewFromHexSeedConstMeta,
      argValues: [unit, seed, targetProofCount, localstore],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletNewFromHexSeedConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_new_from_hex_seed",
        argNames: ["unit", "seed", "targetProofCount", "localstore"],
      );

  @override
  Future<void> crateApiWalletMultiMintWalletReclaimReserved(
      {required MultiMintWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletReclaimReservedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletReclaimReservedConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_reclaim_reserved",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiWalletMultiMintWalletRemoveMint(
      {required MultiMintWallet that, required String mintUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_String(mintUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletRemoveMintConstMeta,
      argValues: [that, mintUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletRemoveMintConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_remove_mint",
        argNames: ["that", "mintUrl"],
      );

  @override
  Future<Wallet?> crateApiWalletMultiMintWalletSelectWallet(
      {required MultiMintWallet that, BigInt? amount, List<String>? mintUrls}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_opt_box_autoadd_u_64(amount, serializer);
        sse_encode_opt_list_String(mintUrls, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletSelectWalletConstMeta,
      argValues: [that, amount, mintUrls],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletSelectWalletConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_select_wallet",
        argNames: ["that", "amount", "mintUrls"],
      );

  @override
  Stream<BigInt> crateApiWalletMultiMintWalletStreamBalance(
      {required MultiMintWallet that}) {
    final sink = RustStreamSink<BigInt>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        sse_encode_StreamSink_u_64_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletStreamBalanceConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletStreamBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_stream_balance",
        argNames: ["that", "sink"],
      );

  @override
  Future<BigInt> crateApiWalletMultiMintWalletTotalBalance(
      {required MultiMintWallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletMultiMintWalletTotalBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletMultiMintWalletTotalBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "MultiMintWallet_total_balance",
        argNames: ["that"],
      );

  @override
  BigInt crateApiWalletPreparedSendAutoAccessorGetAmount(
      {required PreparedSend that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletPreparedSendAutoAccessorGetAmountConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletPreparedSendAutoAccessorGetAmountConstMeta =>
      const TaskConstMeta(
        debugName: "PreparedSend_auto_accessor_get_amount",
        argNames: ["that"],
      );

  @override
  BigInt crateApiWalletPreparedSendAutoAccessorGetFee(
      {required PreparedSend that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletPreparedSendAutoAccessorGetFeeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletPreparedSendAutoAccessorGetFeeConstMeta =>
      const TaskConstMeta(
        debugName: "PreparedSend_auto_accessor_get_fee",
        argNames: ["that"],
      );

  @override
  BigInt crateApiWalletPreparedSendAutoAccessorGetSendFee(
      {required PreparedSend that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletPreparedSendAutoAccessorGetSendFeeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletPreparedSendAutoAccessorGetSendFeeConstMeta =>
          const TaskConstMeta(
            debugName: "PreparedSend_auto_accessor_get_send_fee",
            argNames: ["that"],
          );

  @override
  BigInt crateApiWalletPreparedSendAutoAccessorGetSwapFee(
      {required PreparedSend that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletPreparedSendAutoAccessorGetSwapFeeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletPreparedSendAutoAccessorGetSwapFeeConstMeta =>
          const TaskConstMeta(
            debugName: "PreparedSend_auto_accessor_get_swap_fee",
            argNames: ["that"],
          );

  @override
  void crateApiWalletPreparedSendAutoAccessorSetAmount(
      {required PreparedSend that, required BigInt amount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            that, serializer);
        sse_encode_u_64(amount, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletPreparedSendAutoAccessorSetAmountConstMeta,
      argValues: [that, amount],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletPreparedSendAutoAccessorSetAmountConstMeta =>
      const TaskConstMeta(
        debugName: "PreparedSend_auto_accessor_set_amount",
        argNames: ["that", "amount"],
      );

  @override
  void crateApiWalletPreparedSendAutoAccessorSetFee(
      {required PreparedSend that, required BigInt fee}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            that, serializer);
        sse_encode_u_64(fee, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletPreparedSendAutoAccessorSetFeeConstMeta,
      argValues: [that, fee],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletPreparedSendAutoAccessorSetFeeConstMeta =>
      const TaskConstMeta(
        debugName: "PreparedSend_auto_accessor_set_fee",
        argNames: ["that", "fee"],
      );

  @override
  void crateApiWalletPreparedSendAutoAccessorSetSendFee(
      {required PreparedSend that, required BigInt sendFee}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            that, serializer);
        sse_encode_u_64(sendFee, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletPreparedSendAutoAccessorSetSendFeeConstMeta,
      argValues: [that, sendFee],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletPreparedSendAutoAccessorSetSendFeeConstMeta =>
          const TaskConstMeta(
            debugName: "PreparedSend_auto_accessor_set_send_fee",
            argNames: ["that", "sendFee"],
          );

  @override
  void crateApiWalletPreparedSendAutoAccessorSetSwapFee(
      {required PreparedSend that, required BigInt swapFee}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            that, serializer);
        sse_encode_u_64(swapFee, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletPreparedSendAutoAccessorSetSwapFeeConstMeta,
      argValues: [that, swapFee],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiWalletPreparedSendAutoAccessorSetSwapFeeConstMeta =>
          const TaskConstMeta(
            debugName: "PreparedSend_auto_accessor_set_swap_fee",
            argNames: ["that", "swapFee"],
          );

  @override
  Future<WalletDatabase> crateApiWalletWalletDatabaseNew(
      {required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletDatabaseNewConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletDatabaseNewConstMeta =>
      const TaskConstMeta(
        debugName: "WalletDatabase_new",
        argNames: ["path"],
      );

  @override
  String crateApiWalletWalletAutoAccessorGetMintUrl({required Wallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletAutoAccessorGetMintUrlConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletAutoAccessorGetMintUrlConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_auto_accessor_get_mint_url",
        argNames: ["that"],
      );

  @override
  String crateApiWalletWalletAutoAccessorGetUnit({required Wallet that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletAutoAccessorGetUnitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletAutoAccessorGetUnitConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_auto_accessor_get_unit",
        argNames: ["that"],
      );

  @override
  void crateApiWalletWalletAutoAccessorSetMintUrl(
      {required Wallet that, required String mintUrl}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_String(mintUrl, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletAutoAccessorSetMintUrlConstMeta,
      argValues: [that, mintUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletAutoAccessorSetMintUrlConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_auto_accessor_set_mint_url",
        argNames: ["that", "mintUrl"],
      );

  @override
  void crateApiWalletWalletAutoAccessorSetUnit(
      {required Wallet that, required String unit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_String(unit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletWalletAutoAccessorSetUnitConstMeta,
      argValues: [that, unit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletAutoAccessorSetUnitConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_auto_accessor_set_unit",
        argNames: ["that", "unit"],
      );

  @override
  Future<BigInt> crateApiWalletWalletBalance({required Wallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_balance",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiWalletWalletCancelSend(
      {required Wallet that, required PreparedSend send}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            send, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletCancelSendConstMeta,
      argValues: [that, send],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletCancelSendConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_cancel_send",
        argNames: ["that", "send"],
      );

  @override
  Future<Mint> crateApiWalletWalletGetMint({required Wallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_mint,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletGetMintConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletGetMintConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_get_mint",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiWalletWalletIsTokenSpent(
      {required Wallet that, required Token token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_box_autoadd_token(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletIsTokenSpentConstMeta,
      argValues: [that, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletIsTokenSpentConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_is_token_spent",
        argNames: ["that", "token"],
      );

  @override
  Future<List<Transaction>> crateApiWalletWalletListTransactions(
      {required Wallet that, TransactionDirection? direction}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_opt_box_autoadd_transaction_direction(direction, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_transaction,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletListTransactionsConstMeta,
      argValues: [that, direction],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletListTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_list_transactions",
        argNames: ["that", "direction"],
      );

  @override
  Future<BigInt> crateApiWalletWalletMelt(
      {required Wallet that, required MeltQuote quote}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_box_autoadd_melt_quote(quote, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletMeltConstMeta,
      argValues: [that, quote],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletMeltConstMeta => const TaskConstMeta(
        debugName: "Wallet_melt",
        argNames: ["that", "quote"],
      );

  @override
  Future<MeltQuote> crateApiWalletWalletMeltQuote(
      {required Wallet that, required String request}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_String(request, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_melt_quote,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletMeltQuoteConstMeta,
      argValues: [that, request],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletMeltQuoteConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_melt_quote",
        argNames: ["that", "request"],
      );

  @override
  Stream<MintQuote> crateApiWalletWalletMint(
      {required Wallet that, required BigInt amount, String? description}) {
    final sink = RustStreamSink<MintQuote>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_u_64(amount, serializer);
        sse_encode_opt_String(description, serializer);
        sse_encode_StreamSink_mint_quote_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletMintConstMeta,
      argValues: [that, amount, description, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiWalletWalletMintConstMeta => const TaskConstMeta(
        debugName: "Wallet_mint",
        argNames: ["that", "amount", "description", "sink"],
      );

  @override
  Wallet crateApiWalletWalletNew(
      {required String mintUrl,
      required String unit,
      required List<int> seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(mintUrl, serializer);
        sse_encode_String(unit, serializer);
        sse_encode_list_prim_u_8_loose(seed, serializer);
        sse_encode_opt_box_autoadd_usize(targetProofCount, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
            localstore, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletNewConstMeta,
      argValues: [mintUrl, unit, seed, targetProofCount, localstore],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletNewConstMeta => const TaskConstMeta(
        debugName: "Wallet_new",
        argNames: ["mintUrl", "unit", "seed", "targetProofCount", "localstore"],
      );

  @override
  Wallet crateApiWalletWalletNewFromHexSeed(
      {required String mintUrl,
      required String unit,
      required String seed,
      BigInt? targetProofCount,
      required WalletDatabase localstore}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(mintUrl, serializer);
        sse_encode_String(unit, serializer);
        sse_encode_String(seed, serializer);
        sse_encode_opt_box_autoadd_usize(targetProofCount, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
            localstore, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletNewFromHexSeedConstMeta,
      argValues: [mintUrl, unit, seed, targetProofCount, localstore],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletNewFromHexSeedConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_new_from_hex_seed",
        argNames: ["mintUrl", "unit", "seed", "targetProofCount", "localstore"],
      );

  @override
  Future<void> crateApiWalletWalletPayRequest(
      {required Wallet that,
      required PaymentRequest request,
      required PreparedSend send,
      String? memo,
      bool? includeMemo}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_box_autoadd_payment_request(request, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            send, serializer);
        sse_encode_opt_String(memo, serializer);
        sse_encode_opt_box_autoadd_bool(includeMemo, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletPayRequestConstMeta,
      argValues: [that, request, send, memo, includeMemo],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletPayRequestConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_pay_request",
        argNames: ["that", "request", "send", "memo", "includeMemo"],
      );

  @override
  Future<PreparedSend> crateApiWalletWalletPreparePayRequest(
      {required Wallet that, required PaymentRequest request}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_box_autoadd_payment_request(request, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletPreparePayRequestConstMeta,
      argValues: [that, request],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletPreparePayRequestConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_prepare_pay_request",
        argNames: ["that", "request"],
      );

  @override
  Future<PreparedSend> crateApiWalletWalletPrepareSend(
      {required Wallet that, required BigInt amount, SendOptions? opts}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_u_64(amount, serializer);
        sse_encode_opt_box_autoadd_send_options(opts, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletPrepareSendConstMeta,
      argValues: [that, amount, opts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletPrepareSendConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_prepare_send",
        argNames: ["that", "amount", "opts"],
      );

  @override
  Future<BigInt> crateApiWalletWalletReceive(
      {required Wallet that, required Token token, ReceiveOptions? opts}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_box_autoadd_token(token, serializer);
        sse_encode_opt_box_autoadd_receive_options(opts, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletReceiveConstMeta,
      argValues: [that, token, opts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletReceiveConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_receive",
        argNames: ["that", "token", "opts"],
      );

  @override
  Future<void> crateApiWalletWalletReclaimReserved({required Wallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletReclaimReservedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletReclaimReservedConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_reclaim_reserved",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiWalletWalletReclaimSend(
      {required Wallet that, required Token token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_box_autoadd_token(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletReclaimSendConstMeta,
      argValues: [that, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletReclaimSendConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_reclaim_send",
        argNames: ["that", "token"],
      );

  @override
  Future<void> crateApiWalletWalletRestore({required Wallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletRestoreConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletRestoreConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_restore",
        argNames: ["that"],
      );

  @override
  Future<Token> crateApiWalletWalletSend(
      {required Wallet that,
      required PreparedSend send,
      String? memo,
      bool? includeMemo}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
            send, serializer);
        sse_encode_opt_String(memo, serializer);
        sse_encode_opt_box_autoadd_bool(includeMemo, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_token,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletSendConstMeta,
      argValues: [that, send, memo, includeMemo],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWalletSendConstMeta => const TaskConstMeta(
        debugName: "Wallet_send",
        argNames: ["that", "send", "memo", "includeMemo"],
      );

  @override
  Stream<BigInt> crateApiWalletWalletStreamBalance({required Wallet that}) {
    final sink = RustStreamSink<BigInt>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            that, serializer);
        sse_encode_StreamSink_u_64_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletWalletStreamBalanceConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiWalletWalletStreamBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_stream_balance",
        argNames: ["that", "sink"],
      );

  @override
  String crateApiWalletGenerateHexSeed() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletGenerateHexSeedConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGenerateHexSeedConstMeta =>
      const TaskConstMeta(
        debugName: "generate_hex_seed",
        argNames: [],
      );

  @override
  Uint8List crateApiWalletGenerateSeed() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletGenerateSeedConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGenerateSeedConstMeta => const TaskConstMeta(
        debugName: "generate_seed",
        argNames: [],
      );

  @override
  String crateApiWalletGetPubKey({required String secret}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(secret, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletGetPubKeyConstMeta,
      argValues: [secret],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGetPubKeyConstMeta => const TaskConstMeta(
        debugName: "get_pub_key",
        argNames: ["secret"],
      );

  @override
  Future<void> crateApiInitInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  ParseInputResult crateApiWalletParseInput({required String input}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_parse_input_result,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiWalletParseInputConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletParseInputConstMeta => const TaskConstMeta(
        debugName: "parse_input",
        argNames: ["input"],
      );

  @override
  String crateApiPaymentRequestPaymentRequestEncode(
      {required PaymentRequest that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_payment_request(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPaymentRequestPaymentRequestEncodeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPaymentRequestPaymentRequestEncodeConstMeta =>
      const TaskConstMeta(
        debugName: "payment_request_encode",
        argNames: ["that"],
      );

  @override
  Future<ReceiveOptions> crateApiWalletReceiveOptionsDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_receive_options,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletReceiveOptionsDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletReceiveOptionsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "receive_options_default",
        argNames: [],
      );

  @override
  Future<SendOptions> crateApiWalletSendOptionsDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_send_options,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletSendOptionsDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSendOptionsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "send_options_default",
        argNames: [],
      );

  @override
  Token crateApiTokenTokenParse({required String encoded}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encoded, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_token,
        decodeErrorData: sse_decode_error,
      ),
      constMeta: kCrateApiTokenTokenParseConstMeta,
      argValues: [encoded],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTokenTokenParseConstMeta => const TaskConstMeta(
        debugName: "token_parse",
        argNames: ["encoded"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MultiMintWallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MultiMintWallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PreparedSend => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PreparedSend => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Wallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Wallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WalletDatabase => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WalletDatabase => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  MultiMintWallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PreparedSend
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PreparedSendImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletDatabase
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletDatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MultiMintWallet
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PreparedSend
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PreparedSendImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MultiMintWallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PreparedSend
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PreparedSendImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  MultiMintWallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PreparedSend
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PreparedSendImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WalletDatabase
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletDatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<MintQuote> dco_decode_StreamSink_mint_quote_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<BigInt> dco_decode_StreamSink_u_64_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BitcoinAddress dco_decode_bitcoin_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BitcoinAddress(
      address: dco_decode_String(arr[0]),
      amount: dco_decode_opt_box_autoadd_u_64(arr[1]),
      lightning: dco_decode_opt_String(arr[2]),
      cashu: dco_decode_opt_box_autoadd_payment_request(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Wallet
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
        raw);
  }

  @protected
  BitcoinAddress dco_decode_box_autoadd_bitcoin_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bitcoin_address(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  MeltQuote dco_decode_box_autoadd_melt_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_melt_quote(raw);
  }

  @protected
  MintInfo dco_decode_box_autoadd_mint_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mint_info(raw);
  }

  @protected
  MintVersion dco_decode_box_autoadd_mint_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mint_version(raw);
  }

  @protected
  PaymentRequest dco_decode_box_autoadd_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_payment_request(raw);
  }

  @protected
  ReceiveOptions dco_decode_box_autoadd_receive_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_receive_options(raw);
  }

  @protected
  SendOptions dco_decode_box_autoadd_send_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_send_options(raw);
  }

  @protected
  Token dco_decode_box_autoadd_token(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_token(raw);
  }

  @protected
  TransactionDirection dco_decode_box_autoadd_transaction_direction(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_transaction_direction(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  ContactInfo dco_decode_contact_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContactInfo(
      method: dco_decode_String(arr[0]),
      info: dco_decode_String(arr[1]),
    );
  }

  @protected
  Error dco_decode_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Error_Cdk(
          dco_decode_String(raw[1]),
        );
      case 1:
        return Error_Database(
          dco_decode_String(raw[1]),
        );
      case 2:
        return Error_Hex(
          dco_decode_String(raw[1]),
        );
      case 3:
        return Error_InvalidInput();
      case 4:
        return Error_Protocol(
          dco_decode_String(raw[1]),
        );
      case 5:
        return Error_Reqwest(
          dco_decode_String(raw[1]),
        );
      case 6:
        return Error_Url(
          dco_decode_String(raw[1]),
        );
      case 7:
        return Error_WalletNotEmpty();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Wallet>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<ContactInfo> dco_decode_list_contact_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_contact_info).toList();
  }

  @protected
  List<List<String>> dco_decode_list_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_String).toList();
  }

  @protected
  List<Mint> dco_decode_list_mint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_mint).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<Transaction> dco_decode_list_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transaction).toList();
  }

  @protected
  List<Transport> dco_decode_list_transport(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transport).toList();
  }

  @protected
  MeltQuote dco_decode_melt_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return MeltQuote(
      id: dco_decode_String(arr[0]),
      request: dco_decode_String(arr[1]),
      amount: dco_decode_u_64(arr[2]),
      feeReserve: dco_decode_u_64(arr[3]),
      expiry: dco_decode_u_64(arr[4]),
    );
  }

  @protected
  Mint dco_decode_mint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Mint(
      url: dco_decode_String(arr[0]),
      info: dco_decode_opt_box_autoadd_mint_info(arr[1]),
      balance: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  MintInfo dco_decode_mint_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return MintInfo(
      name: dco_decode_opt_String(arr[0]),
      pubkey: dco_decode_opt_String(arr[1]),
      version: dco_decode_opt_box_autoadd_mint_version(arr[2]),
      description: dco_decode_opt_String(arr[3]),
      descriptionLong: dco_decode_opt_String(arr[4]),
      contact: dco_decode_opt_list_contact_info(arr[5]),
      iconUrl: dco_decode_opt_String(arr[6]),
      urls: dco_decode_opt_list_String(arr[7]),
      motd: dco_decode_opt_String(arr[8]),
      time: dco_decode_opt_box_autoadd_u_64(arr[9]),
    );
  }

  @protected
  MintQuote dco_decode_mint_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return MintQuote(
      id: dco_decode_String(arr[0]),
      request: dco_decode_String(arr[1]),
      amount: dco_decode_u_64(arr[2]),
      expiry: dco_decode_opt_box_autoadd_u_64(arr[3]),
      state: dco_decode_mint_quote_state(arr[4]),
      token: dco_decode_opt_box_autoadd_token(arr[5]),
      error: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  MintQuoteState dco_decode_mint_quote_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MintQuoteState.values[raw as int];
  }

  @protected
  MintVersion dco_decode_mint_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MintVersion(
      name: dco_decode_String(arr[0]),
      version: dco_decode_String(arr[1]),
    );
  }

  @protected
  Map<String, String>? dco_decode_opt_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_Map_String_String_None(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Wallet?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
            raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  MintInfo? dco_decode_opt_box_autoadd_mint_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_mint_info(raw);
  }

  @protected
  MintVersion? dco_decode_opt_box_autoadd_mint_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_mint_version(raw);
  }

  @protected
  PaymentRequest? dco_decode_opt_box_autoadd_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_payment_request(raw);
  }

  @protected
  ReceiveOptions? dco_decode_opt_box_autoadd_receive_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_receive_options(raw);
  }

  @protected
  SendOptions? dco_decode_opt_box_autoadd_send_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_send_options(raw);
  }

  @protected
  Token? dco_decode_opt_box_autoadd_token(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_token(raw);
  }

  @protected
  TransactionDirection? dco_decode_opt_box_autoadd_transaction_direction(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_transaction_direction(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  List<ContactInfo>? dco_decode_opt_list_contact_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_contact_info(raw);
  }

  @protected
  List<List<String>>? dco_decode_opt_list_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_list_String(raw);
  }

  @protected
  List<Transport>? dco_decode_opt_list_transport(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_transport(raw);
  }

  @protected
  ParseInputResult dco_decode_parse_input_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ParseInputResult_BitcoinAddress(
          dco_decode_box_autoadd_bitcoin_address(raw[1]),
        );
      case 1:
        return ParseInputResult_PaymentRequest(
          dco_decode_box_autoadd_payment_request(raw[1]),
        );
      case 2:
        return ParseInputResult_Token(
          dco_decode_box_autoadd_token(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  PaymentRequest dco_decode_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return PaymentRequest(
      paymentId: dco_decode_opt_String(arr[0]),
      amount: dco_decode_opt_box_autoadd_u_64(arr[1]),
      unit: dco_decode_opt_String(arr[2]),
      singleUse: dco_decode_opt_box_autoadd_bool(arr[3]),
      mints: dco_decode_opt_list_String(arr[4]),
      description: dco_decode_opt_String(arr[5]),
      transports: dco_decode_opt_list_transport(arr[6]),
    );
  }

  @protected
  ReceiveOptions dco_decode_receive_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ReceiveOptions(
      signingKeys: dco_decode_opt_list_String(arr[0]),
      preimages: dco_decode_opt_list_String(arr[1]),
      metdata: dco_decode_opt_Map_String_String_None(arr[2]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  SendOptions dco_decode_send_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SendOptions(
      memo: dco_decode_opt_String(arr[0]),
      includeMemo: dco_decode_opt_box_autoadd_bool(arr[1]),
      pubkey: dco_decode_opt_String(arr[2]),
      metadata: dco_decode_opt_Map_String_String_None(arr[3]),
    );
  }

  @protected
  Token dco_decode_token(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Token(
      encoded: dco_decode_String(arr[0]),
      amount: dco_decode_u_64(arr[1]),
      mintUrl: dco_decode_String(arr[2]),
    );
  }

  @protected
  Transaction dco_decode_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Transaction(
      mintUrl: dco_decode_String(arr[0]),
      direction: dco_decode_transaction_direction(arr[1]),
      amount: dco_decode_u_64(arr[2]),
      fee: dco_decode_u_64(arr[3]),
      unit: dco_decode_String(arr[4]),
      ys: dco_decode_list_String(arr[5]),
      timestamp: dco_decode_u_64(arr[6]),
      memo: dco_decode_opt_String(arr[7]),
      metadata: dco_decode_Map_String_String_None(arr[8]),
    );
  }

  @protected
  TransactionDirection dco_decode_transaction_direction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransactionDirection.values[raw as int];
  }

  @protected
  Transport dco_decode_transport(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Transport(
      type: dco_decode_transport_type(arr[0]),
      target: dco_decode_String(arr[1]),
      tags: dco_decode_opt_list_list_String(arr[2]),
    );
  }

  @protected
  TransportType dco_decode_transport_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransportType.values[raw as int];
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  MultiMintWallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PreparedSend
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PreparedSendImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletDatabase
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletDatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MultiMintWallet
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PreparedSend
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PreparedSendImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MultiMintWallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PreparedSend
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PreparedSendImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  MultiMintWallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultiMintWalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PreparedSend
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PreparedSendImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WalletDatabase
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletDatabaseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<MintQuote> sse_decode_StreamSink_mint_quote_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<BigInt> sse_decode_StreamSink_u_64_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BitcoinAddress sse_decode_bitcoin_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_amount = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_lightning = sse_decode_opt_String(deserializer);
    var var_cashu = sse_decode_opt_box_autoadd_payment_request(deserializer);
    return BitcoinAddress(
        address: var_address,
        amount: var_amount,
        lightning: var_lightning,
        cashu: var_cashu);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Wallet
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
        deserializer));
  }

  @protected
  BitcoinAddress sse_decode_box_autoadd_bitcoin_address(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bitcoin_address(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  MeltQuote sse_decode_box_autoadd_melt_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_melt_quote(deserializer));
  }

  @protected
  MintInfo sse_decode_box_autoadd_mint_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mint_info(deserializer));
  }

  @protected
  MintVersion sse_decode_box_autoadd_mint_version(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mint_version(deserializer));
  }

  @protected
  PaymentRequest sse_decode_box_autoadd_payment_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_payment_request(deserializer));
  }

  @protected
  ReceiveOptions sse_decode_box_autoadd_receive_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_receive_options(deserializer));
  }

  @protected
  SendOptions sse_decode_box_autoadd_send_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_send_options(deserializer));
  }

  @protected
  Token sse_decode_box_autoadd_token(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_token(deserializer));
  }

  @protected
  TransactionDirection sse_decode_box_autoadd_transaction_direction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_transaction_direction(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  ContactInfo sse_decode_contact_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_method = sse_decode_String(deserializer);
    var var_info = sse_decode_String(deserializer);
    return ContactInfo(method: var_method, info: var_info);
  }

  @protected
  Error sse_decode_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Cdk(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Database(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Hex(var_field0);
      case 3:
        return Error_InvalidInput();
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Protocol(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Reqwest(var_field0);
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Url(var_field0);
      case 7:
        return Error_WalletNotEmpty();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<Wallet>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Wallet>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<ContactInfo> sse_decode_list_contact_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ContactInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_contact_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<List<String>> sse_decode_list_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <List<String>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Mint> sse_decode_list_mint(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Mint>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_mint(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<Transaction> sse_decode_list_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Transaction>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transaction(deserializer));
    }
    return ans_;
  }

  @protected
  List<Transport> sse_decode_list_transport(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Transport>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transport(deserializer));
    }
    return ans_;
  }

  @protected
  MeltQuote sse_decode_melt_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_request = sse_decode_String(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_feeReserve = sse_decode_u_64(deserializer);
    var var_expiry = sse_decode_u_64(deserializer);
    return MeltQuote(
        id: var_id,
        request: var_request,
        amount: var_amount,
        feeReserve: var_feeReserve,
        expiry: var_expiry);
  }

  @protected
  Mint sse_decode_mint(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_info = sse_decode_opt_box_autoadd_mint_info(deserializer);
    var var_balance = sse_decode_u_64(deserializer);
    return Mint(url: var_url, info: var_info, balance: var_balance);
  }

  @protected
  MintInfo sse_decode_mint_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_opt_String(deserializer);
    var var_pubkey = sse_decode_opt_String(deserializer);
    var var_version = sse_decode_opt_box_autoadd_mint_version(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_descriptionLong = sse_decode_opt_String(deserializer);
    var var_contact = sse_decode_opt_list_contact_info(deserializer);
    var var_iconUrl = sse_decode_opt_String(deserializer);
    var var_urls = sse_decode_opt_list_String(deserializer);
    var var_motd = sse_decode_opt_String(deserializer);
    var var_time = sse_decode_opt_box_autoadd_u_64(deserializer);
    return MintInfo(
        name: var_name,
        pubkey: var_pubkey,
        version: var_version,
        description: var_description,
        descriptionLong: var_descriptionLong,
        contact: var_contact,
        iconUrl: var_iconUrl,
        urls: var_urls,
        motd: var_motd,
        time: var_time);
  }

  @protected
  MintQuote sse_decode_mint_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_request = sse_decode_String(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_expiry = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_state = sse_decode_mint_quote_state(deserializer);
    var var_token = sse_decode_opt_box_autoadd_token(deserializer);
    var var_error = sse_decode_opt_String(deserializer);
    return MintQuote(
        id: var_id,
        request: var_request,
        amount: var_amount,
        expiry: var_expiry,
        state: var_state,
        token: var_token,
        error: var_error);
  }

  @protected
  MintQuoteState sse_decode_mint_quote_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MintQuoteState.values[inner];
  }

  @protected
  MintVersion sse_decode_mint_version(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_version = sse_decode_String(deserializer);
    return MintVersion(name: var_name, version: var_version);
  }

  @protected
  Map<String, String>? sse_decode_opt_Map_String_String_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Map_String_String_None(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Wallet?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MintInfo? sse_decode_opt_box_autoadd_mint_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_mint_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MintVersion? sse_decode_opt_box_autoadd_mint_version(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_mint_version(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PaymentRequest? sse_decode_opt_box_autoadd_payment_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_payment_request(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ReceiveOptions? sse_decode_opt_box_autoadd_receive_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_receive_options(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SendOptions? sse_decode_opt_box_autoadd_send_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_send_options(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Token? sse_decode_opt_box_autoadd_token(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_token(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TransactionDirection? sse_decode_opt_box_autoadd_transaction_direction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_transaction_direction(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ContactInfo>? sse_decode_opt_list_contact_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_contact_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<List<String>>? sse_decode_opt_list_list_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Transport>? sse_decode_opt_list_transport(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_transport(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ParseInputResult sse_decode_parse_input_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_bitcoin_address(deserializer);
        return ParseInputResult_BitcoinAddress(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_payment_request(deserializer);
        return ParseInputResult_PaymentRequest(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_token(deserializer);
        return ParseInputResult_Token(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PaymentRequest sse_decode_payment_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_paymentId = sse_decode_opt_String(deserializer);
    var var_amount = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_unit = sse_decode_opt_String(deserializer);
    var var_singleUse = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_mints = sse_decode_opt_list_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_transports = sse_decode_opt_list_transport(deserializer);
    return PaymentRequest(
        paymentId: var_paymentId,
        amount: var_amount,
        unit: var_unit,
        singleUse: var_singleUse,
        mints: var_mints,
        description: var_description,
        transports: var_transports);
  }

  @protected
  ReceiveOptions sse_decode_receive_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_signingKeys = sse_decode_opt_list_String(deserializer);
    var var_preimages = sse_decode_opt_list_String(deserializer);
    var var_metdata = sse_decode_opt_Map_String_String_None(deserializer);
    return ReceiveOptions(
        signingKeys: var_signingKeys,
        preimages: var_preimages,
        metdata: var_metdata);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SendOptions sse_decode_send_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_memo = sse_decode_opt_String(deserializer);
    var var_includeMemo = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_pubkey = sse_decode_opt_String(deserializer);
    var var_metadata = sse_decode_opt_Map_String_String_None(deserializer);
    return SendOptions(
        memo: var_memo,
        includeMemo: var_includeMemo,
        pubkey: var_pubkey,
        metadata: var_metadata);
  }

  @protected
  Token sse_decode_token(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_encoded = sse_decode_String(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_mintUrl = sse_decode_String(deserializer);
    return Token(
        encoded: var_encoded, amount: var_amount, mintUrl: var_mintUrl);
  }

  @protected
  Transaction sse_decode_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mintUrl = sse_decode_String(deserializer);
    var var_direction = sse_decode_transaction_direction(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_fee = sse_decode_u_64(deserializer);
    var var_unit = sse_decode_String(deserializer);
    var var_ys = sse_decode_list_String(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    var var_memo = sse_decode_opt_String(deserializer);
    var var_metadata = sse_decode_Map_String_String_None(deserializer);
    return Transaction(
        mintUrl: var_mintUrl,
        direction: var_direction,
        amount: var_amount,
        fee: var_fee,
        unit: var_unit,
        ys: var_ys,
        timestamp: var_timestamp,
        memo: var_memo,
        metadata: var_metadata);
  }

  @protected
  TransactionDirection sse_decode_transaction_direction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TransactionDirection.values[inner];
  }

  @protected
  Transport sse_decode_transport(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_type = sse_decode_transport_type(deserializer);
    var var_target = sse_decode_String(deserializer);
    var var_tags = sse_decode_opt_list_list_String(deserializer);
    return Transport(type: var_type, target: var_target, tags: var_tags);
  }

  @protected
  TransportType sse_decode_transport_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TransportType.values[inner];
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          MultiMintWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MultiMintWalletImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          PreparedSend self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PreparedSendImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          WalletDatabase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletDatabaseImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          MultiMintWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MultiMintWalletImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          PreparedSend self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PreparedSendImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          MultiMintWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MultiMintWalletImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          PreparedSend self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PreparedSendImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Map_String_String_None(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultiMintWallet(
          MultiMintWallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MultiMintWalletImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPreparedSend(
          PreparedSend self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PreparedSendImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWalletDatabase(
          WalletDatabase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletDatabaseImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_mint_quote_Sse(
      RustStreamSink<MintQuote> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_mint_quote,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_u_64_Sse(
      RustStreamSink<BigInt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bitcoin_address(
      BitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_opt_box_autoadd_u_64(self.amount, serializer);
    sse_encode_opt_String(self.lightning, serializer);
    sse_encode_opt_box_autoadd_payment_request(self.cashu, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bitcoin_address(
      BitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bitcoin_address(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_melt_quote(
      MeltQuote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_melt_quote(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mint_info(
      MintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mint_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mint_version(
      MintVersion self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mint_version(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_payment_request(
      PaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_receive_options(
      ReceiveOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_receive_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_send_options(
      SendOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_send_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_token(Token self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_token(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_transaction_direction(
      TransactionDirection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transaction_direction(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_contact_info(ContactInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.method, serializer);
    sse_encode_String(self.info, serializer);
  }

  @protected
  void sse_encode_error(Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Error_Cdk(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case Error_Database(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case Error_Hex(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case Error_InvalidInput():
        sse_encode_i_32(3, serializer);
      case Error_Protocol(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case Error_Reqwest(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case Error_Url(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
      case Error_WalletNotEmpty():
        sse_encode_i_32(7, serializer);
    }
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          List<Wallet> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_contact_info(
      List<ContactInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_contact_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_String(
      List<List<String>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_mint(List<Mint> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_mint(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_transaction(
      List<Transaction> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transaction(item, serializer);
    }
  }

  @protected
  void sse_encode_list_transport(
      List<Transport> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transport(item, serializer);
    }
  }

  @protected
  void sse_encode_melt_quote(MeltQuote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.request, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_u_64(self.feeReserve, serializer);
    sse_encode_u_64(self.expiry, serializer);
  }

  @protected
  void sse_encode_mint(Mint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_opt_box_autoadd_mint_info(self.info, serializer);
    sse_encode_u_64(self.balance, serializer);
  }

  @protected
  void sse_encode_mint_info(MintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.pubkey, serializer);
    sse_encode_opt_box_autoadd_mint_version(self.version, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_opt_String(self.descriptionLong, serializer);
    sse_encode_opt_list_contact_info(self.contact, serializer);
    sse_encode_opt_String(self.iconUrl, serializer);
    sse_encode_opt_list_String(self.urls, serializer);
    sse_encode_opt_String(self.motd, serializer);
    sse_encode_opt_box_autoadd_u_64(self.time, serializer);
  }

  @protected
  void sse_encode_mint_quote(MintQuote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.request, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_opt_box_autoadd_u_64(self.expiry, serializer);
    sse_encode_mint_quote_state(self.state, serializer);
    sse_encode_opt_box_autoadd_token(self.token, serializer);
    sse_encode_opt_String(self.error, serializer);
  }

  @protected
  void sse_encode_mint_quote_state(
      MintQuoteState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_mint_version(MintVersion self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.version, serializer);
  }

  @protected
  void sse_encode_opt_Map_String_String_None(
      Map<String, String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Map_String_String_None(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_mint_info(
      MintInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_mint_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_mint_version(
      MintVersion? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_mint_version(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_payment_request(
      PaymentRequest? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_payment_request(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_receive_options(
      ReceiveOptions? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_receive_options(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_send_options(
      SendOptions? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_send_options(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_token(Token? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_token(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_transaction_direction(
      TransactionDirection? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_transaction_direction(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_contact_info(
      List<ContactInfo>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_contact_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_list_String(
      List<List<String>>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_transport(
      List<Transport>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_transport(self, serializer);
    }
  }

  @protected
  void sse_encode_parse_input_result(
      ParseInputResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ParseInputResult_BitcoinAddress(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_bitcoin_address(field0, serializer);
      case ParseInputResult_PaymentRequest(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_payment_request(field0, serializer);
      case ParseInputResult_Token(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_token(field0, serializer);
    }
  }

  @protected
  void sse_encode_payment_request(
      PaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.paymentId, serializer);
    sse_encode_opt_box_autoadd_u_64(self.amount, serializer);
    sse_encode_opt_String(self.unit, serializer);
    sse_encode_opt_box_autoadd_bool(self.singleUse, serializer);
    sse_encode_opt_list_String(self.mints, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_opt_list_transport(self.transports, serializer);
  }

  @protected
  void sse_encode_receive_options(
      ReceiveOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_String(self.signingKeys, serializer);
    sse_encode_opt_list_String(self.preimages, serializer);
    sse_encode_opt_Map_String_String_None(self.metdata, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_send_options(SendOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.memo, serializer);
    sse_encode_opt_box_autoadd_bool(self.includeMemo, serializer);
    sse_encode_opt_String(self.pubkey, serializer);
    sse_encode_opt_Map_String_String_None(self.metadata, serializer);
  }

  @protected
  void sse_encode_token(Token self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.encoded, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_String(self.mintUrl, serializer);
  }

  @protected
  void sse_encode_transaction(Transaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.mintUrl, serializer);
    sse_encode_transaction_direction(self.direction, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_u_64(self.fee, serializer);
    sse_encode_String(self.unit, serializer);
    sse_encode_list_String(self.ys, serializer);
    sse_encode_u_64(self.timestamp, serializer);
    sse_encode_opt_String(self.memo, serializer);
    sse_encode_Map_String_String_None(self.metadata, serializer);
  }

  @protected
  void sse_encode_transaction_direction(
      TransactionDirection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_transport(Transport self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transport_type(self.type, serializer);
    sse_encode_String(self.target, serializer);
    sse_encode_opt_list_list_String(self.tags, serializer);
  }

  @protected
  void sse_encode_transport_type(TransportType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class MultiMintWalletImpl extends RustOpaque implements MultiMintWallet {
  // Not to be used by end users
  MultiMintWalletImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MultiMintWalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MultiMintWallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MultiMintWallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MultiMintWalletPtr,
  );

  Future<void> addMint({required String mintUrl}) => RustLib.instance.api
      .crateApiWalletMultiMintWalletAddMint(that: this, mintUrl: mintUrl);

  Future<void> addWallet({required Wallet wallet}) => RustLib.instance.api
      .crateApiWalletMultiMintWalletAddWallet(that: this, wallet: wallet);

  String get unit =>
      RustLib.instance.api.crateApiWalletMultiMintWalletAutoAccessorGetUnit(
        that: this,
      );

  set unit(String unit) => RustLib.instance.api
      .crateApiWalletMultiMintWalletAutoAccessorSetUnit(that: this, unit: unit);

  Future<List<Mint>> availableMints({BigInt? amount, List<String>? mintUrls}) =>
      RustLib.instance.api.crateApiWalletMultiMintWalletAvailableMints(
          that: this, amount: amount, mintUrls: mintUrls);

  Future<Wallet> createOrGetWallet({required String mintUrl}) =>
      RustLib.instance.api.crateApiWalletMultiMintWalletCreateOrGetWallet(
          that: this, mintUrl: mintUrl);

  Future<Wallet?> getWallet({required String mintUrl}) => RustLib.instance.api
      .crateApiWalletMultiMintWalletGetWallet(that: this, mintUrl: mintUrl);

  Future<List<Mint>> listMints() =>
      RustLib.instance.api.crateApiWalletMultiMintWalletListMints(
        that: this,
      );

  Future<List<Transaction>> listTransactions(
          {TransactionDirection? direction, String? mintUrl}) =>
      RustLib.instance.api.crateApiWalletMultiMintWalletListTransactions(
          that: this, direction: direction, mintUrl: mintUrl);

  Future<List<Wallet>> listWallets() =>
      RustLib.instance.api.crateApiWalletMultiMintWalletListWallets(
        that: this,
      );

  Future<void> reclaimReserved() =>
      RustLib.instance.api.crateApiWalletMultiMintWalletReclaimReserved(
        that: this,
      );

  Future<void> removeMint({required String mintUrl}) => RustLib.instance.api
      .crateApiWalletMultiMintWalletRemoveMint(that: this, mintUrl: mintUrl);

  Future<Wallet?> selectWallet({BigInt? amount, List<String>? mintUrls}) =>
      RustLib.instance.api.crateApiWalletMultiMintWalletSelectWallet(
          that: this, amount: amount, mintUrls: mintUrls);

  Stream<BigInt> streamBalance() =>
      RustLib.instance.api.crateApiWalletMultiMintWalletStreamBalance(
        that: this,
      );

  Future<BigInt> totalBalance() =>
      RustLib.instance.api.crateApiWalletMultiMintWalletTotalBalance(
        that: this,
      );
}

@sealed
class PreparedSendImpl extends RustOpaque implements PreparedSend {
  // Not to be used by end users
  PreparedSendImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PreparedSendImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PreparedSend,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PreparedSend,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PreparedSendPtr,
  );

  BigInt get amount =>
      RustLib.instance.api.crateApiWalletPreparedSendAutoAccessorGetAmount(
        that: this,
      );

  BigInt get fee =>
      RustLib.instance.api.crateApiWalletPreparedSendAutoAccessorGetFee(
        that: this,
      );

  BigInt get sendFee =>
      RustLib.instance.api.crateApiWalletPreparedSendAutoAccessorGetSendFee(
        that: this,
      );

  BigInt get swapFee =>
      RustLib.instance.api.crateApiWalletPreparedSendAutoAccessorGetSwapFee(
        that: this,
      );

  set amount(BigInt amount) =>
      RustLib.instance.api.crateApiWalletPreparedSendAutoAccessorSetAmount(
          that: this, amount: amount);

  set fee(BigInt fee) => RustLib.instance.api
      .crateApiWalletPreparedSendAutoAccessorSetFee(that: this, fee: fee);

  set sendFee(BigInt sendFee) =>
      RustLib.instance.api.crateApiWalletPreparedSendAutoAccessorSetSendFee(
          that: this, sendFee: sendFee);

  set swapFee(BigInt swapFee) =>
      RustLib.instance.api.crateApiWalletPreparedSendAutoAccessorSetSwapFee(
          that: this, swapFee: swapFee);
}

@sealed
class WalletDatabaseImpl extends RustOpaque implements WalletDatabase {
  // Not to be used by end users
  WalletDatabaseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletDatabaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WalletDatabase,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletDatabase,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletDatabasePtr,
  );
}

@sealed
class WalletImpl extends RustOpaque implements Wallet {
  // Not to be used by end users
  WalletImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Wallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Wallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletPtr,
  );

  String get mintUrl =>
      RustLib.instance.api.crateApiWalletWalletAutoAccessorGetMintUrl(
        that: this,
      );

  String get unit =>
      RustLib.instance.api.crateApiWalletWalletAutoAccessorGetUnit(
        that: this,
      );

  set mintUrl(String mintUrl) => RustLib.instance.api
      .crateApiWalletWalletAutoAccessorSetMintUrl(that: this, mintUrl: mintUrl);

  set unit(String unit) => RustLib.instance.api
      .crateApiWalletWalletAutoAccessorSetUnit(that: this, unit: unit);

  Future<BigInt> balance() => RustLib.instance.api.crateApiWalletWalletBalance(
        that: this,
      );

  Future<void> cancelSend({required PreparedSend send}) => RustLib.instance.api
      .crateApiWalletWalletCancelSend(that: this, send: send);

  Future<Mint> getMint() => RustLib.instance.api.crateApiWalletWalletGetMint(
        that: this,
      );

  Future<bool> isTokenSpent({required Token token}) => RustLib.instance.api
      .crateApiWalletWalletIsTokenSpent(that: this, token: token);

  Future<List<Transaction>> listTransactions(
          {TransactionDirection? direction}) =>
      RustLib.instance.api.crateApiWalletWalletListTransactions(
          that: this, direction: direction);

  Future<BigInt> melt({required MeltQuote quote}) =>
      RustLib.instance.api.crateApiWalletWalletMelt(that: this, quote: quote);

  Future<MeltQuote> meltQuote({required String request}) => RustLib.instance.api
      .crateApiWalletWalletMeltQuote(that: this, request: request);

  Stream<MintQuote> mint({required BigInt amount, String? description}) =>
      RustLib.instance.api.crateApiWalletWalletMint(
          that: this, amount: amount, description: description);

  Future<void> payRequest(
          {required PaymentRequest request,
          required PreparedSend send,
          String? memo,
          bool? includeMemo}) =>
      RustLib.instance.api.crateApiWalletWalletPayRequest(
          that: this,
          request: request,
          send: send,
          memo: memo,
          includeMemo: includeMemo);

  Future<PreparedSend> preparePayRequest({required PaymentRequest request}) =>
      RustLib.instance.api
          .crateApiWalletWalletPreparePayRequest(that: this, request: request);

  Future<PreparedSend> prepareSend(
          {required BigInt amount, SendOptions? opts}) =>
      RustLib.instance.api.crateApiWalletWalletPrepareSend(
          that: this, amount: amount, opts: opts);

  Future<BigInt> receive({required Token token, ReceiveOptions? opts}) =>
      RustLib.instance.api
          .crateApiWalletWalletReceive(that: this, token: token, opts: opts);

  Future<void> reclaimReserved() =>
      RustLib.instance.api.crateApiWalletWalletReclaimReserved(
        that: this,
      );

  Future<void> reclaimSend({required Token token}) => RustLib.instance.api
      .crateApiWalletWalletReclaimSend(that: this, token: token);

  Future<void> restore() => RustLib.instance.api.crateApiWalletWalletRestore(
        that: this,
      );

  Future<Token> send(
          {required PreparedSend send, String? memo, bool? includeMemo}) =>
      RustLib.instance.api.crateApiWalletWalletSend(
          that: this, send: send, memo: memo, includeMemo: includeMemo);

  Stream<BigInt> streamBalance() =>
      RustLib.instance.api.crateApiWalletWalletStreamBalance(
        that: this,
      );
}
